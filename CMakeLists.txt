cmake_minimum_required(VERSION 3.15) # Ensure this matches or is newer than Conan's CMakeToolchain requirement (3.15 is good)
project(rucksdb CXX) # Declare your project name and language

# Include the Conan toolchain file
# This file is generated by Conan and sets up CMake to find Conan packages.
# It should be included before any find_package() calls for Conan dependencies.
# The path is now relative to the build directory where CMake is configured.
include(${CMAKE_BINARY_DIR}/conan/conan_toolchain.cmake) # <--- CHANGED THIS LINE

# Find your dependencies using CMake's find_package.
# CMakeDeps generator creates these configuration files.
# The names here (duckdb, RocksDB) should match what Conan's recipes define.
# For RocksDB, the package name is typically 'RocksDB' (capitalized).
find_package(duckdb REQUIRED)
find_package(RocksDB REQUIRED)

# Add your library
# Assuming your source files are in the 'src' directory, e.g., src/rucksdb.cpp
# Replace 'rucksdb.cpp' with your actual source file names.
add_library(rucksdb STATIC src/rucksdb.cpp) # Or SHARED if you want a shared library

# Link your library against its dependencies
# Use the imported targets generated by CMakeDeps (e.g., duckdb::duckdb, RocksDB::rocksdb)
target_link_libraries(rucksdb PUBLIC
    duckdb::duckdb
    RocksDB::rocksdb
)

# Set include directories for your own project's headers (if any)
# Assuming your public headers are in an 'include' directory
target_include_directories(rucksdb PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# --- NEW ADDITIONS FOR EXECUTABLE ---

# Add an executable for testing or demonstration
# Create a new source file for your main function, e.g., src/main.cpp
add_executable(rucksdb_example src/main.cpp)

# Link the example executable to your rucksdb library
# This will also pull in rucksdb's dependencies (duckdb, RocksDB)
target_link_libraries(rucksdb_example PRIVATE rucksdb)

# Optional: Add an install rule for the executable if you want to install it
install(TARGETS rucksdb_example
        DESTINATION bin)
